package dejavu;

import java.util.ArrayList;
import java.util.List;

import org.lwjgl.opengl.Display;
import org.lwjgl.util.vector.Vector2f;

import dejavu.engine.entities.Entity;
import dejavu.engine.gameStates.GameState;
import dejavu.engine.graphics.Camera;
import dejavu.engine.graphics.DisplayManager;
import dejavu.engine.graphics.Loader;
import dejavu.engine.graphics.Render;
import dejavu.engine.graphics.Texture;
import dejavu.engine.graphics.guis.GuiComponent;
import dejavu.engine.input.MouseHandler;
import dejavu.game.entities.Player;
import dejavu.game.gameStates.MainMenuState;
import dejavu.game.gameStates.PlayState;
import dejavu.game.graphics.guis.ExitButton;
import dejavu.game.graphics.guis.StateChangeButton;
import dejavu.game.map.MainMap;

public class Main {

	private static boolean running = true;

	private static GameState currentGameState;

	public static Texture roadVert, grass, flowers;

	private static Camera camera;

	public static void main(String[] args) {

		DisplayManager.createDisplay();

		Render renderer = new Render();
		camera = new Camera(new Vector2f(-Config.START_POSITION.x, -Config.START_POSITION.y));
		renderer.setCamera(camera);

		List<GuiComponent> guis = new ArrayList<GuiComponent>();
		GuiComponent exitButton = new ExitButton(new Vector2f(-0.25f, -0.6f), 1, new Vector2f(0.5f, 0.10f),
				new Texture("res/textures/guis/button.png"));
		GuiComponent playButton = new StateChangeButton(new Vector2f(-0.25f, 0.2f), 1, new Vector2f(0.5f, 0.10f),
				new Texture("res/textures/guis/button.png"),
				new PlayState(
						new Player(Config.START_POSITION, new Texture("res/textures/entities/player/forward.png"),
								new Texture("res/textures/entities/player/backward.png"),
								new Texture("res/textures/entities/player/left.png"),
								new Texture("res/textures/entities/player/right.png")),
						new MainMap(), new ArrayList<GuiComponent>(), new ArrayList<Entity>()));
		guis.add(exitButton);
		guis.add(playButton);

		currentGameState = new MainMenuState(guis);

		while (!Display.isCloseRequested() && running) {

			MouseHandler.update();

			currentGameState.updateState();

			renderer.prepare();
			renderer.render(currentGameState);

			DisplayManager.updateDisplay();
		}

		currentGameState.cleanUp();
		renderer.cleanUp();
		Loader.cleanUp();
		DisplayManager.closeDisplay();

	}

	public static void increaseCameraPosition(Vector2f deltaPos) {
		Vector2f startPos = camera.getPosition();
		Vector2f nextPos = new Vector2f(startPos.x + deltaPos.x, startPos.y + deltaPos.y);
		camera.setPosition(nextPos);
	}

	public static void setCameraPosition(Vector2f pos) {
		camera.setPosition(pos);
	}

	public static void changeGameState(GameState nextState) {
		currentGameState.cleanUp();
		currentGameState = nextState;
	}

	public static void closeGame() {
		running = false;
	}

}
